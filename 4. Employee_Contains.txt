/////////////EmployeeController

package com.examly.springapp.controller;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.examly.springapp.model.Employee;
import com.examly.springapp.service.EmployeeService;
@RestController
@RequestMapping("/employees")
public class EmployeeController {
@Autowired
private EmployeeService employeeService;
@PostMapping
public ResponseEntity<Employee> addEmployee(@RequestBody Employee
employee) {
return new ResponseEntity<>(employeeService.saveEmployee(employee),
HttpStatus.CREATED);
}
@GetMapping("/containing/{searchTerm}")
public ResponseEntity<List<Employee>> getEmployeesContaining(@PathVariable
String searchTerm) {

return new
ResponseEntity<>(employeeService.getEmployeesContaining(searchTerm),
HttpStatus.OK);
}
@GetMapping("/startsWith/{name}")
public ResponseEntity<List<Employee>>
getEmployeesStartingWith(@PathVariable String name) {
return new
ResponseEntity<>(employeeService.getEmployeesStartingWith(name),
HttpStatus.OK);
}
@GetMapping("/endsWith/{name}")
public ResponseEntity<List<Employee>> getEmployeesEndingWith(@PathVariable
String name) {
return new
ResponseEntity<>(employeeService.getEmployeesEndingWith(name), HttpStatus.OK);
}
@GetMapping("/contains/{designation}")
public ResponseEntity<List<Employee>> getEmployeesContains(@PathVariable
String designation) {
return new
ResponseEntity<>(employeeService.getEmployeesContains(designation),
HttpStatus.OK);
}
@GetMapping("/isContaining/{name}")
public ResponseEntity<List<Employee>>
getEmployeesIsContaining(@PathVariable String name) {
return new
ResponseEntity<>(employeeService.getEmployeesIsContaining(name),
HttpStatus.OK);
}
}




/////////////////Employee



package com.examly.springapp.model;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
@Entity
public class Employee {
@Id
@GeneratedValue(strategy = GenerationType.IDENTITY)
private int id;
private String name;

private String designation;
public Employee() {
}
public Employee(String name, String designation) {
this.name = name;
this.designation = designation;
}
// Getters and setters
public int getId() {
return id;
}
public void setId(int id) {
this.id = id;
}
public String getName() {
return name;
}
public void setName(String name) {
this.name = name;
}
public String getDesignation() {
return designation;
}
public void setDesignation(String designation) {
this.designation = designation;
}

}




///////////////Employee Repo



package com.examly.springapp.repository;
import java.util.List;
import org.springframework.data.jpa.repository.JpaRepository;
import com.examly.springapp.model.Employee;

public interface EmployeeRepo extends JpaRepository<Employee,Integer>{
List<Employee>
findByNameContainingIgnoreCaseOrDesignationContainingIgnoreCase(String name,
String designation);
List<Employee> findByNameStartingWithIgnoreCase(String name);
List<Employee> findByNameEndingWithIgnoreCase(String name);
List<Employee> findByDesignationContainingIgnoreCase(String designation);
List<Employee> findByNameIsContainingIgnoreCase(String name);
}


//////////////////EmployeeService



package com.examly.springapp.service;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.examly.springapp.model.Employee;
import com.examly.springapp.repository.EmployeeRepo;
@Service
public class EmployeeService {
@Autowired
private EmployeeRepo employeeRepo;
public Employee saveEmployee(Employee employee) {
return employeeRepo.save(employee);
}
public List<Employee> getEmployeesContaining(String searchTerm) {
return
employeeRepo.findByNameContainingIgnoreCaseOrDesignationContainingIgnoreCase
(searchTerm, searchTerm);
}
public List<Employee> getEmployeesStartingWith(String name) {
return employeeRepo.findByNameStartingWithIgnoreCase(name);
}
public List<Employee> getEmployeesEndingWith(String name) {

return employeeRepo.findByNameEndingWithIgnoreCase(name);
}
public List<Employee> getEmployeesContains(String designation) {
return
employeeRepo.findByDesignationContainingIgnoreCase(designation);
}
public List<Employee> getEmployeesIsContaining(String name) {
return employeeRepo.findByNameIsContainingIgnoreCase(name);
}
}