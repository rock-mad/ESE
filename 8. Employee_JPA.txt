/////////////EmployeeController


package com.examly.springapp.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.examly.springapp.model.Employee;
import com.examly.springapp.service.EmployeeService;

@RestController
public class EmployeeController {
    @Autowired
    private EmployeeService es;

    @PostMapping("/employee")
    public ResponseEntity<?> postd(@RequestBody Employee emp) {
        try {
            return new ResponseEntity<>(es.postd(emp), HttpStatus.CREATED);
        } catch (Exception e) {
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @GetMapping("/employee")
    public ResponseEntity<?> getd() {
        try {
            return new ResponseEntity<>(es.getd(), HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    @GetMapping("/employee/{id}")
    public ResponseEntity<?> gettd(@PathVariable int id) {
        try {
            return new ResponseEntity<>(es.gettd(id), HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    @GetMapping("/employee/hired/{hireDate}")
    public ResponseEntity<?> getttd(@PathVariable String hireDate) {
        try {
            return new ResponseEntity<>(es.getttd(hireDate), HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    @GetMapping("/employee/first-three-characters-of-name")
    public ResponseEntity<?> gettttd() {
        try {
            return new ResponseEntity<>(es.gettttd(), HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }
}



///////////Employee



package com.examly.springapp.model;

import java.util.Date;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

@Entity
public class Employee {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;
    private String name;
    private String address;
    private String phoneNumber;
    private String email;
    private String jobTitle;
    private String department;
    private double salary;
    @Temporal(TemporalType.DATE)
    private Date hireDate;

    public Employee() {
    }

    public Employee(int id, String name, String address, String phoneNumber, String email, String jobTitle,
            String department, double salary, Date hireDate) {
        this.id = id;
        this.name = name;
        this.address = address;
        this.phoneNumber = phoneNumber;
        this.email = email;
        this.jobTitle = jobTitle;
        this.department = department;
        this.salary = salary;
        this.hireDate = hireDate;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public String getPhoneNumber() {
        return phoneNumber;
    }

    public void setPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getJobTitle() {
        return jobTitle;
    }

    public void setJobTitle(String jobTitle) {
        this.jobTitle = jobTitle;
    }

    public String getDepartment() {
        return department;
    }

    public void setDepartment(String department) {
        this.department = department;
    }

    public double getSalary() {
        return salary;
    }

    public void setSalary(double salary) {
        this.salary = salary;
    }

    public Date getHireDate() {
        return hireDate;
    }

    public void setHireDate(Date hireDate) {
        this.hireDate = hireDate;
    }
}


////////////EmployeeRepo


package com.examly.springapp.repository;

import java.util.Date;
import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;

import com.examly.springapp.model.Employee;

public interface EmployeeRepo extends JpaRepository<Employee, Integer> {
    List<Employee> findByHireDate(Date hireDates);

    @Query("SELECT SUBSTRING(e.name, 1, 3) FROM Employee e")
    List<String> findFirstThreeCharactersOfAllNames();
}



///////////EmployeeService



package com.examly.springapp.service;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.examly.springapp.model.Employee;
import com.examly.springapp.repository.EmployeeRepo;

@Service
public class EmployeeService {
    @Autowired
    private EmployeeRepo er;

    public Employee postd(Employee emp) {
        return er.save(emp);
    }

    public List<Employee> getd() {
        return er.findAll();
    }

    public Optional<Employee> gettd(int id) {
        return er.findById(id);
    }

    public List<Employee> getttd(String hireDate) throws ParseException {
        Date hireDates = new SimpleDateFormat("yyyy-MM-dd").parse(hireDate);
        return er.findByHireDate(hireDates);
    }

    public List<String> gettttd() {
        return er.findFirstThreeCharactersOfAllNames();
    }
}